image:
  # An alpine-based image with the `docker` CLI installed.
  name: docker:stable 

# This will run a Docker daemon in a container (Docker-In-Docker), which will
# be available at thedockerhost:2375. If you make e.g. port 5000 public in Docker
# (`docker run -p 5000:5000 yourimage`) it will be exposed at thedockerhost:5000.
services:
  - name: docker:dind
    alias: thedockerhost

variables:
  # Tell docker CLI how to talk to Docker daemon; see
  # https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#use-docker-in-docker-executor
  DOCKER_HOST: tcp://thedockerhost:2375/
  # Use the overlayfs driver for improved performance:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""



## Should contain at least these three stages for a basic CI/CD
stages:
  - build
  - test
  - deploy

## BUILD
docker-build-production:
  stage: build

  before_script:
  ## Install Docker Compose 
    - which docker-compose || apk add --no-cache docker-compose

  script:
        ## Login to Gitlab Provided Container Registry for this project.
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker-compose build --pull --compress --force-rm
    - docker image list
    - docker tag gateway:latest "$CI_REGISTRY_IMAGE"/gateway:"$CI_COMMIT_REF_NAME"
    - docker push "$CI_REGISTRY_IMAGE"/gateway:"$CI_COMMIT_REF_NAME"
    - docker tag offers:latest "$CI_REGISTRY_IMAGE"/offers:"$CI_COMMIT_REF_NAME"
    - docker push "$CI_REGISTRY_IMAGE"/offers:"$CI_COMMIT_REF_NAME"
    - docker tag recommendation:latest "$CI_REGISTRY_IMAGE"/recommendation:"$CI_COMMIT_REF_NAME"
    - docker push "$CI_REGISTRY_IMAGE"/recommendation:"$CI_COMMIT_REF_NAME"
    - docker tag users:latest "$CI_REGISTRY_IMAGE"/users:"$CI_COMMIT_REF_NAME"
    - docker push "$CI_REGISTRY_IMAGE"/users:"$CI_COMMIT_REF_NAME"
    - docker tag affect:latest "$CI_REGISTRY_IMAGE"/affect:"$CI_COMMIT_REF_NAME"
    - docker push "$CI_REGISTRY_IMAGE"/affect:"$CI_COMMIT_REF_NAME"
 


## Test 
docker-test:
  before_script:
    ## Login to Gitlab Provided Container Registry for this project.
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    ## Install Docker Compose 
  stage: test
  script:
    - echo "Run Tests here..."


## DEPLOY
docker-deploy-production:

  before_script:
    - apk add curl
    - apk add bash
    - apk add nodejs npm
    - curl https://cli-assets.heroku.com/install.sh | sh
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull "$CI_REGISTRY_IMAGE"/gateway:"$CI_COMMIT_REF_NAME"

  stage: deploy
  script:
    - echo "Deploy app here..."
    - heroku --version
    - heroku auth:token
    - docker login --username=_ --password=$(heroku auth:token) registry.heroku.com
    - docker tag "$CI_REGISTRY_IMAGE"/gateway:"$CI_COMMIT_REF_NAME" registry.heroku.com/iwa-recette/web
    - docker push registry.heroku.com/iwa-recette/web
    - heroku container:release web --app iwa-recette
   

  only:
    - production

docker-deploy-recette:

  before_script:
    - apk add curl
    - apk add bash
    - apk add nodejs npm
    - curl https://cli-assets.heroku.com/install.sh | sh
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull "$CI_REGISTRY_IMAGE"/gateway:"$CI_COMMIT_REF_NAME"

  stage: deploy
  script:
    - echo "Deploy app here..."
    - heroku --version
    - heroku auth:token
    - docker login --username=_ --password=$(heroku auth:token) registry.heroku.com
    - docker tag "$CI_REGISTRY_IMAGE"/gateway:"$CI_COMMIT_REF_NAME" registry.heroku.com/iwa-recette/web
    - docker push registry.heroku.com/iwa-recette/web
    - heroku container:release web --app iwa-recette
   

  only:
    - recette